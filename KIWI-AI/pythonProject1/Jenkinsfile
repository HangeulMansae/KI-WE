pipeline {
    agent any
    environment {
        KIWI_ENV = credentials('jenkins_kiwi_ai.env') // secretfile 가져오기
    }
    stages {
        stage('Load Environment Variables') {
            steps {
                script {
                    // env.KIWI_ENV 경로를 기준으로 jenkins_kiwi_ai.env 파일을 로드하고 환경변수를 설정합니다.
                    def props = readProperties(file: env.KIWI_ENV)
                    env.DOCKER_IMAGE = props['DOCKER_IMAGE']
                    env.DOCKER_IMAGE_FILE = props['DOCKER_IMAGE_FILE']
                    env.DEPLOY_LOG_PATH = props['DEPLOY_LOG_PATH']
                    env.FAST_API_DIR = props['FAST_API_DIR']
                    env.REMOTE_DIR = props['REMOTE_DIR']  // REMOTE_DIR 환경변수 추가
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Docker 이미지 빌드 및 저장
                    sh 'cd KIWI-AI/pythonProject1 && docker build -t $DOCKER_IMAGE .'
                    sh 'cd KIWI-AI/pythonProject1 && docker save $DOCKER_IMAGE -o $DOCKER_IMAGE_FILE'
                }
            }
        }

        stage('Transfer Files to EC2') {
            steps {
                script {
                    // 두 파일을 EC2로 전송하는 단계
                    sshPublisher(
                        continueOnError: false, 
                        failOnError: true, 
                        publishers: [
                            sshPublisherDesc(
                                configName: 'D205-Server',
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: "KIWI-AI/pythonProject1/$DOCKER_IMAGE_FILE",
                                        removePrefix: 'KIWI-AI/pythonProject1/',
                                        remoteDirectory: env.REMOTE_DIR,
                                        execCommand: 'echo "Transferring $DOCKER_IMAGE_FILE to $REMOTE_DIR" && ls -al $REMOTE_DIR',
                                        execTimeout: 120000
                                    ),
                                    sshTransfer(
                                        sourceFiles: 'KIWI-AI/pythonProject1/compose.yml',
                                        removePrefix: 'KIWI-AI/pythonProject1/',
                                        remoteDirectory: env.REMOTE_DIR,
                                        execCommand: 'echo "Transferring compose.yml to $REMOTE_DIR" && ls -al $REMOTE_DIR',
                                        execTimeout: 120000
                                    )
                                ]
                            )
                        ]
                    )

                }
            }
        }

        stage('Deploy FastApi Server') {
            steps {
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: 'D205-Server',
                                transfers: [
                                    sshTransfer(
                                        execCommand: """
                                            set -x  # 디버깅 모드 활성화
                                            exec > >(tee $DEPLOY_LOG_PATH) 2>&1
                                            cd $FAST_API_DIR
                                            docker compose up -d
                                        """
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        always {
            echo 'This will always run, regardless of success or failure.'
            // 추가적인 후속 작업을 여기에 작성할 수 있습니다.
        }
    }
}
