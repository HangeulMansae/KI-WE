pipeline {
    agent any
    environment {
        CREWIN_ENV = credentials('jenkins_kiwi_android.env')
        JAVA_HOME = '/opt/java/openjdk'
        ANDROID_HOME = '/opt/android-sdk'
        PATH = "$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$PATH"
    }
    stages {
        stage('Load Environment Variables') {
            steps {
                script {
                    def props = readProperties file: "${CREWIN_ENV}"
                    env.MATTERMOST_CHANNEL_NAME = props.MATTERMOST_CHANNEL_NAME
                    env.MATTERMOST_WEBHOOK_URL = props.MATTERMOST_WEBHOOK_URL
                    env.NGINX_CONTAINER_NAME = props.NGINX_CONTAINER_NAME
                    env.DIST_PATH = props.DIST_PATH
                    env.REMOVE_PREFIX = props.REMOVE_PREFIX
                    env.HOST_PATH = props.HOST_PATH

                    // 환경변수 확인 로그
                    echo "Loaded environment variables:"
                    echo "DIST_PATH: ${env.DIST_PATH}"
                    echo "REMOVE_PREFIX: ${env.REMOVE_PREFIX}"
                    echo "HOST_PATH: ${env.HOST_PATH}"
                }
            }
        }
        stage('Environment Check') {
            steps {
                sh '''
                    echo "Java version:"
                    java -version
                    echo "Android SDK location:"
                    echo $ANDROID_HOME
                    echo "Platform tools version:"
                    $ANDROID_HOME/platform-tools/adb version
                '''
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Prepare Config') {
            steps {
                withCredentials([file(credentialsId: 'kiwi-android-properties', variable: 'CONFIG_FILE')]) {
                    sh '''
                        chmod -R 755 KIWE-Android
                        cp $CONFIG_FILE KIWE-Android/local.properties
                    '''
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    sh '''
                        cd KIWE-Android
                        chmod +x gradlew
                        ./gradlew clean assembleDebug --stacktrace
                    '''
                }
            }
        }
        stage('Archive APK') {
            steps {
                archiveArtifacts artifacts: 'KIWE-Android/app/kiosk/build/outputs/apk/debug/*.apk', fingerprint: true
                script {
                    sh '''
                        cd KIWE-Android/app/kiosk/build/outputs/apk/debug
                        ls -la
                    '''
                }
            }
        }
        stage('Transfer') {
            steps {
                script {
                    // 전송 전 파일 존재 확인
                    sh '''
                        echo "Checking APK file before transfer:"
                        ls -l KIWE-Android/app/kiosk/build/outputs/apk/debug/
                    '''
                }
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'D205-Server',
                            transfers: [
                                sshTransfer(
                                    sourceFiles: "${env.DIST_PATH}",
                                    removePrefix: "${env.REMOVE_PREFIX}",
                                    remoteDirectory: "${env.HOST_PATH}",
                                    execCommand: '''
                                        echo "Checking transferred APK file:"
                                        ls -l /home/ubuntu/dev/nginx/android/apk/
                                    '''
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                            verbose: true
                        )
                    ]
                )
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // 컨테이너 상태 확인 후 재시작
                    sh """
                        echo "Checking nginx container status:"
                        docker ps | grep ${env.NGINX_CONTAINER_NAME} || echo "Container not found"

                        echo "Attempting to restart nginx container:"
                        docker restart ${env.NGINX_CONTAINER_NAME} || echo "Failed to restart container"
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Build and deployment successful'
        }
        failure {
            echo 'Build or deployment failed'
        }
    }
}